version: "3.5"

services:
  api01: &api
    # Lembre-se de que seu serviço HTTP deve estar hospedado num repositório
    # publicamente acessível! Ex.: hub.docker.com
    image: alcivanlucas/rinha-backend-2024-q1-nodejs:latest
    # build: .    
    command: npm run dev

    hostname: api01
    environment:
      - DB_HOSTNAME=db
      - DB_USER=admin
      - DB_NAME=rinha
      - DB_PASSWORD=123

    # Não é necessário expor qualquer porta além da porta do load balancer,
    # mas é comum as pessoas o fazerem para testarem suas APIs e conectarem
    # ao banco de dados na fase de desenvolvimento.
    ports:
      - "8081:3000"
    depends_on:
       db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.6"
          memory: "190MB"

  api02:
    # Essa sintaxe reusa o que foi declarado em 'api01'.
    <<: *api 
    hostname: api02
    environment:
      - DB_HOSTNAME=db
    ports:
      - "8082:3000"
 
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
    ports:
        # Obrigatório expor/usar a porta 9999 no load balancer!
      - "9999:9999" 
    deploy:
      resources:
        limits:
          # cpus: "0.17"
          cpus: "0.10"
          memory: "20MB"
           
  db:
    image: postgres:16.2-alpine
    hostname: db
    command: 'postgres -c max_connections=1024 -c shared_buffers=128MB -c synchronous_commit=off -c fsync=off -c full_page_writes=off'
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_USER=admin
      - POSTGRES_DB=rinha
    ports:
      - "5432:5432"
    volumes:
      - ./script.sql:/docker-entrypoint-initdb.d/script.sql
    deploy:
      resources:
        limits:
          # Note que a soma de todos os limites dos serviços
          # aqui declarados é de 1.5 unidades de CPU e 550MB
          # de memória. A distribuição feita aqui é apenas
          # um exemplo – distribua como quiser.
          cpus: "0.2"
          memory: "150MB"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      timeout: 15s
      interval: 10s
      retries: 10
      

# O uso do modo `bridge` deve ser adequado à carga que será usada no teste.
# A edição anterior se beneficiou do modo host pois o volume de requisições
# era relativamente alto e a virtualização da rede se tornou um gargalo, mas
# este modo é mais complexo de ser configurado. Fique à vontade para usar o
# modo que quiser desde que não conflite com portas trivialmente usadas em um
# SO.
networks:
  default:
    driver: bridge
    name: rinha-nginx-2024q1

