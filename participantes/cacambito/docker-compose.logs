 Network rinha-backend-nginx  Creating
 Network rinha-backend-nginx  Created
 Container cacambito-db-1  Creating
 Container cacambito-db-1  Created
 Container cacambito-api01-1  Creating
 Container cacambito-api02-1  Creating
 Container cacambito-api02-1  Created
 Container cacambito-api01-1  Created
 Container cacambito-nginx-1  Creating
 Container cacambito-nginx-1  Created
Attaching to api01-1, api02-1, db-1, nginx-1
db-1     | The files belonging to this database system will be owned by user "postgres".
db-1     | This user must also own the server process.
db-1     | 
db-1     | The database cluster will be initialized with locale "en_US.utf8".
db-1     | The default database encoding has accordingly been set to "UTF8".
db-1     | The default text search configuration will be set to "english".
db-1     | 
db-1     | Data page checksums are disabled.
db-1     | 
db-1     | fixing permissions on existing directory /var/lib/postgresql/data ... ok
db-1     | creating subdirectories ... ok
db-1     | selecting dynamic shared memory implementation ... posix
db-1     | selecting default max_connections ... 100
db-1     | selecting default shared_buffers ... 128MB
db-1     | selecting default time zone ... UTC
db-1     | creating configuration files ... ok
nginx-1  | /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration
nginx-1  | /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/
nginx-1  | /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh
nginx-1  | 10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf
nginx-1  | 10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf
nginx-1  | /docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh
nginx-1  | /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh
nginx-1  | /docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh
nginx-1  | /docker-entrypoint.sh: Configuration complete; ready for start up
api02-1  | 
api02-1  | > rinha-de-backend@0.0.1 start:prod
api02-1  | > node dist/src/main
api02-1  | 
api01-1  | 
api01-1  | > rinha-de-backend@0.0.1 start:prod
api01-1  | > node dist/src/main
api01-1  | 
db-1     | running bootstrap script ... ok
api02-1  | [32m[Nest] 18  - [39m02/12/2024, 5:36:56 PM [32m    LOG[39m [38;5;3m[NestFactory] [39m[32mStarting Nest application...[39m
api02-1  | [32m[Nest] 18  - [39m02/12/2024, 5:36:56 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mConfigHostModule dependencies initialized[39m[38;5;3m +73ms[39m
api02-1  | [32m[Nest] 18  - [39m02/12/2024, 5:36:56 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mAppModule dependencies initialized[39m[38;5;3m +0ms[39m
api02-1  | [32m[Nest] 18  - [39m02/12/2024, 5:36:56 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mConfigModule dependencies initialized[39m[38;5;3m +1ms[39m
api02-1  | [32m[Nest] 18  - [39m02/12/2024, 5:36:56 PM [32m    LOG[39m [38;5;3m[RoutesResolver] [39m[32mAppController {/}:[39m[38;5;3m +19ms[39m
api02-1  | [32m[Nest] 18  - [39m02/12/2024, 5:36:56 PM [32m    LOG[39m [38;5;3m[RouterExplorer] [39m[32mMapped {/clientes/:id/transacoes, POST} route[39m[38;5;3m +4ms[39m
api02-1  | [32m[Nest] 18  - [39m02/12/2024, 5:36:56 PM [32m    LOG[39m [38;5;3m[RouterExplorer] [39m[32mMapped {/clientes/:id/extrato, GET} route[39m[38;5;3m +0ms[39m
nginx-1  | 2024/02/12 17:36:56 [error] 29#29: *1 connect() failed (111: Connection refused) while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://192.168.16.4:3000/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:36:56 [error] 29#29: *1 connect() failed (111: Connection refused) while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://192.168.16.3:3000/clientes/1/extrato", host: "localhost:9999"
api02-1  | /usr/src/api/node_modules/@prisma/client/runtime/library.js:116
api02-1  | You may have to run ${pt("prisma generate")} for your changes to take effect.`,this.config.clientVersion);return t}}parseEngineResponse(t){if(!t)throw new W("Response from the Engine was empty",{clientVersion:this.config.clientVersion});try{return JSON.parse(t)}catch{throw new W("Unable to JSON.parse response from engine",{clientVersion:this.config.clientVersion})}}async loadEngine(){if(!this.engine){this.QueryEngineConstructor||(this.library=await this.libraryLoader.loadLibrary(this.config),this.QueryEngineConstructor=this.library.QueryEngine);try{let t=new WeakRef(this),{adapter:r}=this.config;r&&qe("Using driver adapter: %O",r),this.engine=new this.QueryEngineConstructor({datamodel:this.datamodel,env:process.env,logQueries:this.config.logQueries??!1,ignoreEnvVarErrors:!0,datasourceOverrides:this.datasourceOverrides??{},logLevel:this.logLevel,configDir:this.config.cwd,engineProtocol:"json"},n=>{t.deref()?.logger(n)},r),Ml++}catch(t){let r=t,n=this.parseInitError(r.message);throw typeof n=="string"?r:new O(n.message,this.config.clientVersion,n.error_code)}}}logger(t){let r=this.parseEngineResponse(t);if(r){if("span"in r){this.config.tracingHelper.createEngineSpan(r);return}r.level=r?.level.toLowerCase()??"unknown",Gf(r)?this.logEmitter.emit("query",{timestamp:new Date,query:r.query,params:r.params,duration:Number(r.duration_ms),target:r.module_path}):Jf(r)?this.loggerRustPanic=new be(this.getErrorMessageWithLink(`${r.message}: ${r.reason} in ${r.file}:${r.line}:${r.column}`),this.config.clientVersion):this.logEmitter.emit(r.level,{timestamp:new Date,message:r.message,target:r.module_path})}}getErrorMessageWithLink(t){return gl({binaryTarget:this.binaryTarget,title:t,version:this.config.clientVersion,engineVersion:this.versionInfo?.commit,database:this.config.activeProvider,query:this.lastQuery})}parseInitError(t){try{return JSON.parse(t)}catch{}return t}parseRequestError(t){try{return JSON.parse(t)}catch{}return t}onBeforeExit(){throw new Error('"beforeExit" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.')}async start(){if(await this.libraryInstantiationPromise,await this.libraryStoppingPromise,this.libraryStartingPromise)return qe(`library already starting, this.libraryStarted: ${this.libraryStarted}`),this.libraryStartingPromise;if(this.libraryStarted)return;let t=async()=>{qe("library starting");try{let r={traceparent:this.config.tracingHelper.getTraceParent()};await this.engine?.connect(JSON.stringify(r)),this.libraryStarted=!0,qe("library started")}catch(r){let n=this.parseInitError(r.message);throw typeof n=="string"?r:new O(n.message,this.config.clientVersion,n.error_code)}finally{this.libraryStartingPromise=void 0}};return this.libraryStartingPromise=this.config.tracingHelper.runInChildSpan("connect",t),this.libraryStartingPromise}async stop(){if(await this.libraryStartingPromise,await this.executingQueryPromise,this.libraryStoppingPromise)return qe("library is already stopping"),this.libraryStoppingPromise;if(!this.libraryStarted)return;let t=async()=>{await new Promise(n=>setTimeout(n,5)),qe("library stopping");let r={traceparent:this.config.tracingHelper.getTraceParent()};await this.engine?.disconnect(JSON.stringify(r)),this.libraryStarted=!1,this.libraryStoppingPromise=void 0,qe("library stopped")};return this.libraryStoppingPromise=this.config.tracingHelper.runInChildSpan("disconnect",t),this.libraryStoppingPromise}version(){return this.versionInfo=this.library?.version(),this.versionInfo?.version??"unknown"}debugPanic(t){return this.library?.debugPanic(t)}async request(t,{traceparent:r,interactiveTransaction:n}){qe(`sending request, this.libraryStarted: ${this.libraryStarted}`);let i=JSON.stringify({traceparent:r}),o=JSON.stringify(t);try{await this.start(),this.executingQueryPromise=this.engine?.query(o,i,n?.id),this.lastQuery=o;let s=this.parseEngineResponse(await this.executingQueryPromise);if(s.errors)throw s.errors.length===1?this.buildQueryError(s.errors[0]):new W(JSON.stringify(s.errors),{clientVersion:this.config.clientVersion});if(this.loggerRustPanic)throw this.loggerRustPanic;return{data:s,elapsed:0}}catch(s){if(s instanceof O)throw s;if(s.code==="GenericFailure"&&s.message?.startsWith("PANIC:"))throw new be(this.getErrorMessageWithLink(s.message),this.config.clientVersion);let a=this.parseRequestError(s.message);throw typeof a=="string"?s:new W(`${a.message}
api02-1  |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             
api02-1  | 
api02-1  | PrismaClientInitializationError: Can't reach database server at `db`:`5432`
api02-1  | 
api02-1  | Please make sure your database server is running at `db`:`5432`.
api02-1  |     at t (/usr/src/api/node_modules/@prisma/client/runtime/library.js:116:2723)
api02-1  |     at async Proxy.onModuleInit (/usr/src/api/dist/src/prisma.service.js:14:9)
api02-1  |     at async Promise.all (index 0)
api02-1  |     at async callModuleInitHook (/usr/src/api/node_modules/@nestjs/core/hooks/on-module-init.hook.js:43:5)
api02-1  |     at async NestApplication.callInitHook (/usr/src/api/node_modules/@nestjs/core/nest-application-context.js:223:13)
api02-1  |     at async NestApplication.init (/usr/src/api/node_modules/@nestjs/core/nest-application.js:100:9)
api02-1  |     at async NestApplication.listen (/usr/src/api/node_modules/@nestjs/core/nest-application.js:169:33)
api02-1  |     at async bootstrap (/usr/src/api/dist/src/main.js:7:5) {
api02-1  |   clientVersion: '5.9.1',
api02-1  |   errorCode: 'P1001'
api02-1  | }
api02-1  | 
api02-1  | Node.js v18.19.0
api01-1  | [32m[Nest] 18  - [39m02/12/2024, 5:36:56 PM [32m    LOG[39m [38;5;3m[NestFactory] [39m[32mStarting Nest application...[39m
api01-1  | [32m[Nest] 18  - [39m02/12/2024, 5:36:56 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mConfigHostModule dependencies initialized[39m[38;5;3m +19ms[39m
api01-1  | [32m[Nest] 18  - [39m02/12/2024, 5:36:56 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mAppModule dependencies initialized[39m[38;5;3m +0ms[39m
api01-1  | [32m[Nest] 18  - [39m02/12/2024, 5:36:56 PM [32m    LOG[39m [38;5;3m[InstanceLoader] [39m[32mConfigModule dependencies initialized[39m[38;5;3m +0ms[39m
api01-1  | [32m[Nest] 18  - [39m02/12/2024, 5:36:56 PM [32m    LOG[39m [38;5;3m[RoutesResolver] [39m[32mAppController {/}:[39m[38;5;3m +57ms[39m
api01-1  | [32m[Nest] 18  - [39m02/12/2024, 5:36:56 PM [32m    LOG[39m [38;5;3m[RouterExplorer] [39m[32mMapped {/clientes/:id/transacoes, POST} route[39m[38;5;3m +5ms[39m
api01-1  | [32m[Nest] 18  - [39m02/12/2024, 5:36:56 PM [32m    LOG[39m [38;5;3m[RouterExplorer] [39m[32mMapped {/clientes/:id/extrato, GET} route[39m[38;5;3m +0ms[39m
api01-1  | /usr/src/api/node_modules/@prisma/client/runtime/library.js:116
api01-1  | You may have to run ${pt("prisma generate")} for your changes to take effect.`,this.config.clientVersion);return t}}parseEngineResponse(t){if(!t)throw new W("Response from the Engine was empty",{clientVersion:this.config.clientVersion});try{return JSON.parse(t)}catch{throw new W("Unable to JSON.parse response from engine",{clientVersion:this.config.clientVersion})}}async loadEngine(){if(!this.engine){this.QueryEngineConstructor||(this.library=await this.libraryLoader.loadLibrary(this.config),this.QueryEngineConstructor=this.library.QueryEngine);try{let t=new WeakRef(this),{adapter:r}=this.config;r&&qe("Using driver adapter: %O",r),this.engine=new this.QueryEngineConstructor({datamodel:this.datamodel,env:process.env,logQueries:this.config.logQueries??!1,ignoreEnvVarErrors:!0,datasourceOverrides:this.datasourceOverrides??{},logLevel:this.logLevel,configDir:this.config.cwd,engineProtocol:"json"},n=>{t.deref()?.logger(n)},r),Ml++}catch(t){let r=t,n=this.parseInitError(r.message);throw typeof n=="string"?r:new O(n.message,this.config.clientVersion,n.error_code)}}}logger(t){let r=this.parseEngineResponse(t);if(r){if("span"in r){this.config.tracingHelper.createEngineSpan(r);return}r.level=r?.level.toLowerCase()??"unknown",Gf(r)?this.logEmitter.emit("query",{timestamp:new Date,query:r.query,params:r.params,duration:Number(r.duration_ms),target:r.module_path}):Jf(r)?this.loggerRustPanic=new be(this.getErrorMessageWithLink(`${r.message}: ${r.reason} in ${r.file}:${r.line}:${r.column}`),this.config.clientVersion):this.logEmitter.emit(r.level,{timestamp:new Date,message:r.message,target:r.module_path})}}getErrorMessageWithLink(t){return gl({binaryTarget:this.binaryTarget,title:t,version:this.config.clientVersion,engineVersion:this.versionInfo?.commit,database:this.config.activeProvider,query:this.lastQuery})}parseInitError(t){try{return JSON.parse(t)}catch{}return t}parseRequestError(t){try{return JSON.parse(t)}catch{}return t}onBeforeExit(){throw new Error('"beforeExit" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.')}async start(){if(await this.libraryInstantiationPromise,await this.libraryStoppingPromise,this.libraryStartingPromise)return qe(`library already starting, this.libraryStarted: ${this.libraryStarted}`),this.libraryStartingPromise;if(this.libraryStarted)return;let t=async()=>{qe("library starting");try{let r={traceparent:this.config.tracingHelper.getTraceParent()};await this.engine?.connect(JSON.stringify(r)),this.libraryStarted=!0,qe("library started")}catch(r){let n=this.parseInitError(r.message);throw typeof n=="string"?r:new O(n.message,this.config.clientVersion,n.error_code)}finally{this.libraryStartingPromise=void 0}};return this.libraryStartingPromise=this.config.tracingHelper.runInChildSpan("connect",t),this.libraryStartingPromise}async stop(){if(await this.libraryStartingPromise,await this.executingQueryPromise,this.libraryStoppingPromise)return qe("library is already stopping"),this.libraryStoppingPromise;if(!this.libraryStarted)return;let t=async()=>{await new Promise(n=>setTimeout(n,5)),qe("library stopping");let r={traceparent:this.config.tracingHelper.getTraceParent()};await this.engine?.disconnect(JSON.stringify(r)),this.libraryStarted=!1,this.libraryStoppingPromise=void 0,qe("library stopped")};return this.libraryStoppingPromise=this.config.tracingHelper.runInChildSpan("disconnect",t),this.libraryStoppingPromise}version(){return this.versionInfo=this.library?.version(),this.versionInfo?.version??"unknown"}debugPanic(t){return this.library?.debugPanic(t)}async request(t,{traceparent:r,interactiveTransaction:n}){qe(`sending request, this.libraryStarted: ${this.libraryStarted}`);let i=JSON.stringify({traceparent:r}),o=JSON.stringify(t);try{await this.start(),this.executingQueryPromise=this.engine?.query(o,i,n?.id),this.lastQuery=o;let s=this.parseEngineResponse(await this.executingQueryPromise);if(s.errors)throw s.errors.length===1?this.buildQueryError(s.errors[0]):new W(JSON.stringify(s.errors),{clientVersion:this.config.clientVersion});if(this.loggerRustPanic)throw this.loggerRustPanic;return{data:s,elapsed:0}}catch(s){if(s instanceof O)throw s;if(s.code==="GenericFailure"&&s.message?.startsWith("PANIC:"))throw new be(this.getErrorMessageWithLink(s.message),this.config.clientVersion);let a=this.parseRequestError(s.message);throw typeof a=="string"?s:new W(`${a.message}
api01-1  |
api01-1  | 
api01-1  | PrismaClientInitializationError: Can't reach database server at `db`:`5432`
api01-1  | 
api01-1  | Please make sure your database server is running at `db`:`5432`.
api01-1  |     at t (/usr/src/api/node_modules/@prisma/client/runtime/library.js:116:2723)
api01-1  |     at async Proxy.onModuleInit (/usr/src/api/dist/src/prisma.service.js:14:9)
api01-1  |     at async Promise.all (index 0)
api01-1  |     at async callModuleInitHook (/usr/src/api/node_modules/@nestjs/core/hooks/on-module-init.hook.js:43:5)
api01-1  |     at async NestApplication.callInitHook (/usr/src/api/node_modules/@nestjs/core/nest-application-context.js:223:13)
api01-1  |     at async NestApplication.init (/usr/src/api/node_modules/@nestjs/core/nest-application.js:100:9)
api01-1  |     at async NestApplication.listen (/usr/src/api/node_modules/@nestjs/core/nest-application.js:169:33)
api01-1  |     at async bootstrap (/usr/src/api/dist/src/main.js:7:5) {
api01-1  |   clientVersion: '5.9.1',
api01-1  |   errorCode: 'P1001'
api01-1  | }
api01-1  | 
api01-1  | Node.js v18.19.0
db-1     | sh: locale: not found
db-1     | 2024-02-12 17:36:57.200 UTC [30] WARNING:  no usable system locales were found
api01-1 exited with code 1
api02-1 exited with code 1
nginx-1  | 2024/02/12 17:36:58 [error] 29#29: *4 no live upstreams while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://api/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:37:00 [error] 29#29: *5 no live upstreams while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://api/clientes/1/extrato", host: "localhost:9999"
db-1     | performing post-bootstrap initialization ... ok
db-1     | initdb: warning: enabling "trust" authentication for local connections
db-1     | You can change this by editing pg_hba.conf or using the option -A, or
db-1     | --auth-local and --auth-host, the next time you run initdb.
db-1     | syncing data to disk ... ok
db-1     | 
db-1     | 
db-1     | Success. You can now start the database server using:
db-1     | 
db-1     |     pg_ctl -D /var/lib/postgresql/data -l logfile start
db-1     | 
db-1     | waiting for server to start....2024-02-12 17:37:01.067 UTC [36] LOG:  starting PostgreSQL 14.10 on x86_64-pc-linux-musl, compiled by gcc (Alpine 13.2.1_git20231014) 13.2.1 20231014, 64-bit
db-1     | 2024-02-12 17:37:01.078 UTC [36] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
db-1     | 2024-02-12 17:37:01.119 UTC [37] LOG:  database system was shut down at 2024-02-12 17:37:00 UTC
db-1     | 2024-02-12 17:37:01.132 UTC [36] LOG:  database system is ready to accept connections
db-1     |  done
db-1     | server started
db-1     | CREATE DATABASE
db-1     | 
db-1     | 
db-1     | /usr/local/bin/docker-entrypoint.sh: running /docker-entrypoint-initdb.d/init.sql
db-1     | CREATE TABLE
db-1     | CREATE TABLE
db-1     | ALTER TABLE
db-1     | INSERT 0 5
db-1     | 
db-1     | 
db-1     | waiting for server to shut down...2024-02-12 17:37:01.792 UTC [36] LOG:  received fast shutdown request
db-1     | .2024-02-12 17:37:01.806 UTC [36] LOG:  aborting any active transactions
db-1     | 2024-02-12 17:37:01.809 UTC [36] LOG:  background worker "logical replication launcher" (PID 43) exited with exit code 1
db-1     | 2024-02-12 17:37:01.810 UTC [38] LOG:  shutting down
db-1     | 2024-02-12 17:37:01.997 UTC [36] LOG:  database system is shut down
db-1     |  done
db-1     | server stopped
db-1     | 
db-1     | PostgreSQL init process complete; ready for start up.
db-1     | 
db-1     | 2024-02-12 17:37:02.233 UTC [1] LOG:  starting PostgreSQL 14.10 on x86_64-pc-linux-musl, compiled by gcc (Alpine 13.2.1_git20231014) 13.2.1 20231014, 64-bit
db-1     | 2024-02-12 17:37:02.233 UTC [1] LOG:  listening on IPv4 address "0.0.0.0", port 5432
db-1     | 2024-02-12 17:37:02.233 UTC [1] LOG:  listening on IPv6 address "::", port 5432
db-1     | 2024-02-12 17:37:02.278 UTC [1] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"
nginx-1  | 2024/02/12 17:37:02 [error] 29#29: *6 no live upstreams while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://api/clientes/1/extrato", host: "localhost:9999"
db-1     | 2024-02-12 17:37:02.334 UTC [53] LOG:  database system was shut down at 2024-02-12 17:37:01 UTC
db-1     | 2024-02-12 17:37:02.354 UTC [1] LOG:  database system is ready to accept connections
nginx-1  | 2024/02/12 17:37:04 [error] 29#29: *7 no live upstreams while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://api/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:37:06 [error] 29#29: *8 no live upstreams while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://api/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:37:42 [error] 29#29: *9 connect() failed (113: No route to host) while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://192.168.16.3:3000/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:01 [error] 29#29: *9 connect() failed (113: No route to host) while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://192.168.16.4:3000/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:06 [error] 29#29: *12 connect() failed (113: No route to host) while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://192.168.16.3:3000/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:06 [error] 29#29: *12 no live upstreams while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://api/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:08 [error] 29#29: *14 no live upstreams while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://api/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:10 [error] 29#29: *15 no live upstreams while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://api/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:15 [error] 29#29: *16 connect() failed (113: No route to host) while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://192.168.16.4:3000/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:15 [error] 29#29: *16 no live upstreams while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://api/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:20 [error] 29#29: *18 connect() failed (113: No route to host) while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://192.168.16.3:3000/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:20 [error] 29#29: *18 no live upstreams while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://api/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:22 [error] 29#29: *20 no live upstreams while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://api/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:24 [error] 29#29: *21 no live upstreams while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://api/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:29 [error] 29#29: *22 connect() failed (113: No route to host) while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://192.168.16.4:3000/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:29 [error] 29#29: *22 no live upstreams while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://api/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:34 [error] 29#29: *24 connect() failed (113: No route to host) while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://192.168.16.3:3000/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:34 [error] 29#29: *24 no live upstreams while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://api/clientes/1/extrato", host: "localhost:9999"
nginx-1  | 2024/02/12 17:38:36 [error] 29#29: *26 no live upstreams while connecting to upstream, client: 192.168.16.1, server: , request: "GET /clientes/1/extrato HTTP/1.1", upstream: "http://api/clientes/1/extrato", host: "localhost:9999"
nginx-1 exited with code 0
nginx-1 exited with code 0
db-1     | 2024-02-12 17:38:39.429 UTC [1] LOG:  received fast shutdown request
db-1     | 2024-02-12 17:38:39.432 UTC [1] LOG:  aborting any active transactions
db-1     | 2024-02-12 17:38:39.435 UTC [1] LOG:  background worker "logical replication launcher" (PID 59) exited with exit code 1
db-1     | 2024-02-12 17:38:39.436 UTC [54] LOG:  shutting down
db-1     | 2024-02-12 17:38:39.461 UTC [1] LOG:  database system is shut down
db-1 exited with code 0
