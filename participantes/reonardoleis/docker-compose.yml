version: '3.5'
services:
  api1:
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: banky
      MANAGER_ADDR: manager:65000
    image: rxonvrdo/banky:latest
    entrypoint: /bin/sh -c
    command: -c "./app http"
    hostname: api1
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8080"
    deploy:
      resources:
        limits:
          cpus: '0.35'
          memory: '112MB'

  api2:
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: banky
      MANAGER_ADDR: manager:65000
    image: rxonvrdo/banky:latest
    entrypoint: /bin/sh -c
    command: -c "./app http"
    hostname: api2
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8080"
    deploy:
      resources:
        limits:
          cpus: '0.35'
          memory: '113MB'

  manager:
    environment:
      IS_QUEUE: "false"
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: banky
      CACHE_DURATION_SECONDS: 3600
    image: rxonvrdo/banky:latest
    entrypoint: /bin/sh -c
    command: -c "./app tcp"
    hostname: manager
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "65000"
    deploy:
      resources:
        limits:
          cpus: '0.6'
          memory: '145MB'

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
    ports:
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: '80MB'
  db:
   healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
   image: postgres
   hostname: db
   environment:
     POSTGRES_PASSWORD: postgres
     POSTGRES_USER: postgres
   deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: '100MB'
   volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
