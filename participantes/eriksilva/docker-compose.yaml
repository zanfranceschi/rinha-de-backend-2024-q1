version: "3.5"

services:
  api01: &api
    # Lembre-se de que seu serviço HTTP deve estar hospedado num repositório
    # publicamente acessível! Ex.: hub.docker.com
    image: erikyami/rinha:2.9.2
    hostname: api01
    depends_on:
      db:
        condition: service_healthy
        restart: true
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: "40MB"

  api02:
    # Essa sintaxe reusa o que foi declarado em 'api01'.
    <<: *api
    hostname: api02
  
  nginx:
    image: nginx:alpine3.18-slim
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
    ports:
        # Obrigatório expor/usar a porta 9999 no load balancer!
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: "40MB"

  db:
    hostname: db
    image: postgres:16-alpine
    command: postgres -c config_file=/docker-entrypoint-initdb.d/postgresql.conf
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=crebito
    ports:
      - "5432:5432"
    volumes:
      - ./postgresql.conf:/docker-entrypoint-initdb.d/postgresql.conf
      - ./pg-init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d crebito'"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s

    deploy:
      resources:
        limits:
          # Note que a soma de todos os limites dos serviços
          # aqui declarados é de 1.5 unidades de CPU e 550MB
          # de memória. A distribuição feita aqui é apenas
          # um exemplo – distribua como quiser.
          cpus: "0.9"
          memory: "430MB"


# O uso do modo `bridge` deve ser adequado à carga que será usada no teste.
# A edição anterior se beneficiou do modo host pois o volume de requisições
# era relativamente alto e a virtualização da rede se tornou um gargalo, mas
# este modo é mais complexo de ser configurado. Fique à vontade para usar o
# modo que quiser desde que não conflite com portas trivialmente usadas em um
# SO.
networks:
  default:
    driver: bridge
    name: rinha-nginx-2024q1
