version: '3.8'

services:
  redis:
    image: redis:latest
    container_name: redis_container
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
    command:
      - /bin/sh
      - -c
      - redis-server --requirepass "$${REDIS_PASSWORD:?REDIS_PASSWORD variable is not set}"
    ports:
      - "$REDIS_PORT:$REDIS_PORT"
    env_file:
      - .env
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli", "--raw", "incr", "ping"]
      interval: 1s
      timeout: 3s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "50MB"
  postgres:
    container_name: postgres_container
    image: postgres:latest
    environment:
      - POSTGRES_USER=${DB_USER:-master}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
      - PGDATA=/data/postgres
      - POSTGRES_DB=${DB_NAME-rb}
    volumes:
      - postgres:/data/postgres
      - ./.docker/postgres:/docker-entrypoint-initdb.d
    command: postgres -c checkpoint_timeout=600 -c max_wal_size=4096 -c synchronous_commit=0 -c full_page_writes=0
    env_file:
      - .env
    ports:
      - "$DB_PORT:$DB_PORT"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "100MB"
  server01: &server
    container_name: server01_container
    image: josimarz/rinhadebackend2024q1:latest
    hostname: server01
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app-network
    env_file:
      - .env
    deploy:
      resources:
        limits:
          cpus: "0.9"
          memory: "180MB"
  server02:
    <<: *server
    container_name: server02_container
    hostname: server02
    ports:
      - "8081:8080"
  nginx:
    image: nginx:latest
    container_name: nginx_container
    volumes:
      - ./.docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - server01
      - server02
    ports:
      - "9999:9999"
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: "0.15"
          memory: "40MB"

networks:
  app-network:
    driver: bridge

volumes:
  postgres: