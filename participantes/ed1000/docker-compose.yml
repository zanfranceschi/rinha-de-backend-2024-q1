version: '3.5'

services:
  postgres:
    image: postgres:16.1-alpine3.19
    environment:
      POSTGRES_DB: "rinha"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "123"
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    command: postgres -c checkpoint_timeout=600 -c max_wal_size=4096 -c max_connections=40
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s
    deploy:
      resources:
        limits:
          # Note que a soma de todos os limites dos serviços
          # aqui declarados é de 1.5 unidades de CPU e 550MB
          # de memória. A distribuição feita aqui é apenas
          # um exemplo – distribua como quiser.
          cpus: "0.55"
          memory: "230MB"

  nginx:
    image: nginx:1.25.4-alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
    ports:
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: "0.15"
          memory: "40MB"

  api:
    image: 1tiquinho/rinha2024q1:v4
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/rinha
      DATABASE_USER: postgres
      DATABASE_PASSWORD: 123
    command: --spring.datasource.hikari.maximumPoolSize=15
    ulimits:
      nofile:
        soft: 1000000
        hard: 1000000
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "0.40"
          memory: "140MB"
