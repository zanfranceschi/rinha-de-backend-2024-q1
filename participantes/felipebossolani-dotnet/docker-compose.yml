version: '3.8'

services:
  api1: &api
    image: felipebossolani/rinha-de-backend-2024-q01-dotnet
    container_name: api1
    hostname: api1
    ports:
      - "8080:8080"
    environment:
      - ConnectionStrings__rinha=Host=db;Database=rinha;Username=user;Password=password;Pooling=true;Minimum Pool Size=0;Maximum Pool Size=100;
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.4'
          memory: '200MB'

  api2:
    <<: *api
    hostname: api2
    container_name: api2 
    ports:
      - "8081:8080"

  nginx:
    image: nginx:latest
    container_name: nginx
    restart: on-failure
    volumes:
      - ./infra/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
    ports:
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "20MB"
    networks:
      - app-network

  db:
    image: postgres:latest
    container_name: db
    hostname: db
    command: 'postgres -c max_connections=1000 -c shared_buffers=128MB -c synchronous_commit=off -c fsync=off -c full_page_writes=off'
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=user
      - POSTGRES_DB=rinha
    ports:
      - "5432:5432"
    volumes:
      - ./db/01_ddl.sql:/docker-entrypoint-initdb.d/01_ddl.sql:ro
      - ./db/02_dml.sql:/docker-entrypoint-initdb.d/02_dml.sql:ro
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '500MB'
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "--username", "rinha"]
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s

networks:
  app-network: