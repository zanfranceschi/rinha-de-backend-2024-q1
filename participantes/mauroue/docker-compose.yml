version: "3.5"

services:
  api01: &api
    # Lembre-se de que seu serviço HTTP deve estar hospedado num repositório
    # publicamente acessível! Ex.: hub.docker.com
    build: .
    volumes:
      - ./:/app
    image: mauroue/rinha-de-backend-2024-q1:latest
    container_name: api01
    hostname: api01
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_USER=admin
      - POSTGRES_DB=rinha
      - POSTGRES_PASSWORD=123
    # Não é necessário expor qualquer porta além da porta do load balancer,
    # mas é comum as pessoas o fazerem para testarem suas APIs e conectarem
    # ao banco de dados na fase de desenvolvimento.
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD-SHELL", "true"]
      interval: 2s
      timeout: 2s
      retries: 15
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "50MB" 

  api02:
    # Essa sintaxe reusa o que foi declarado em 'api01'.
    <<: *api 
    container_name: api02
    hostname: api02
    ports:
      - "8082:8080"
 
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
        # Obrigatório expor/usar a porta 9999 no load balancer!
      - "9999:9999" 
    depends_on:
      api01:
        condition: service_healthy
      api02:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.17"
          memory: "10MB"

  db:
    image: postgres:latest
    container_name: db
    hostname: db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d rinha -U admin"]
      interval: 5s
      timeout: 5s
      retries: 15
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_USER=admin
      - POSTGRES_DB=rinha
    ports:
      - "5432:5432"
    volumes:
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./script.sql:/docker-entrypoint-initdb.d/script.sql
    deploy:
      resources:
        limits:
          # Note que a soma de todos os limites dos serviços
          # aqui declarados é de 1.5 unidades de CPU e 550MB
          # de memória. A distribuição feita aqui é apenas
          # um exemplo – distribua como quiser.
          cpus: "0.83"
          memory: "440MB"

# O uso do modo `bridge` deve ser adequado à carga que será usada no teste.
# A edição anterior se beneficiou do modo host pois o volume de requisições
# era relativamente alto e a virtualização da rede se tornou um gargalo, mas
# este modo é mais complexo de ser configurado. Fique à vontade para usar o
# modo que quiser desde que não conflite com portas trivialmente usadas em um
# SO.
networks:
  default:
    driver: bridge
    name: rinha-nginx-2024q1
