version: "3.5"

services:
  api01: &api
    # Lembre-se de que seu serviço HTTP deve estar hospedado num repositório
    # publicamente acessível! Ex.: hub.docker.com
    image: ryrden/rinha-de-backend-go:latest
    restart: always
    hostname: api01
    environment:
      - ENABLE_SONIC_JSON=1
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=rinha
      - DB_PORT=5432
      - CPU_PROFILE=/app/prof/cpu-1.prof
      - MEM_PROFILE=/app/prof/mem-1.prof
      - SERVER_PORT=8080
      - ENABLE_PROFILING=0
      - MAX_DB_CONNECTIONS=20
      - MIN_DB_CONNECTIONS=12
      - MAX_IDLE_TIME=1000 # in milliseconds
    
    # volumes:
    #   - ./prof:/app/prof
    # Não é necessário expor qualquer porta além da porta do load balancer,
    # mas é comum as pessoas o fazerem para testarem suas APIs e conectarem
    # ao banco de dados na fase de desenvolvimento.
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.35"
          memory: "100MB"

  api02:
    # Essa sintaxe reusa o que foi declarado em 'api01'.
    <<: *api 
    ports:
      - "8081:8080"
    depends_on:
      db:
        condition: service_healthy


  nginx:
    image: nginx:latest
    volumes:
      - ./scripts/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
    ports:
        # Obrigatório expor/usar a porta 9999 no load balancer!
      - "9999:9999" 
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "50MB"

  db:
    image: postgres:latest
    hostname: db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=rinha
    ports:
      - "5432:5432"
    volumes:
      - postgres-db:/var/lib/postgresql/data
      - ./scripts/postgres/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 15s
      timeout: 25s
    command:
      [
        "postgres",
        "-c",
        "config_file=/docker-entrypoint-initdb.d/postgresql.conf",
      ]
    deploy:
      resources:
        limits:
          # Note que a soma de todos os limites dos serviços
          # aqui declarados é de 1.5 unidades de CPU e 550MB
          # de memória. A distribuição feita aqui é apenas
          # um exemplo – distribua como quiser.
          cpus: "0.7"
          memory: "300MB"

# O uso do modo `bridge` deve ser adequado à carga que será usada no teste.
# A edição anterior se beneficiou do modo host pois o volume de requisições
# era relativamente alto e a virtualização da rede se tornou um gargalo, mas
# este modo é mais complexo de ser configurado. Fique à vontade para usar o
# modo que quiser desde que não conflite com portas trivialmente usadas em um
# SO.
networks:
  default:
    driver: bridge
    name: rinha-nginx-2024q1

volumes:
  postgres-db: