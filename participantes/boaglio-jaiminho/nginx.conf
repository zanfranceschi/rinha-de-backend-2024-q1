# Adjusting file descriptor limits might not be feasible in a low memory environment.
# It's commented out here but adjust according to your system's capability and needs.
# worker_rlimit_nofile 2048;

worker_processes  10 ; # Optimal since more worker processes would increase memory usage.

events {
    worker_connections 512; # Lowering this as each connection consumes memory.
    multi_accept on; # Accept as many connections as possible, up to worker_connections.
    use epoll; # Efficient for many connections, but keep worker_connections in check.
}

http {
    access_log off; # Disable logging to save on I/O and CPU.
    sendfile   on; # Efficient serving of static files.

    keepalive_timeout 15; # Lowering the timeout to free up connections faster.
    keepalive_requests 100; # Lower number of requests per connection to free up memory sooner.

    # Disabling gzip compression as it requires additional memory and CPU resources.
    # Consider enabling it if the CPU is underutilized and network bandwidth is a concern.

    upstream api {
        server 127.0.0.1:8081;
        server 127.0.0.1:8082;
        keepalive 64; # Adjusted down to balance between performance and memory usage.
    }

    server {
        listen 9999;

        location / {
            proxy_pass http://api;
            proxy_buffering off; # Helps reduce memory usage by not buffering responses.
            proxy_set_header Connection ""; # Disable keep-alive for upstream connections.
            proxy_http_version 1.1; # Use HTTP/1.1 to support keepalive with upstream if needed.
        }
    }
}